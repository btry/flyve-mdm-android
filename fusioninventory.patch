From 6b9e4aeea1c8407ab9c380d5f08569dee2327b8a Mon Sep 17 00:00:00 2001
From: Dorian LARGET <dlarget@teclib.com>
Date: Wed, 7 Dec 2016 14:33:27 +0100
Subject: [PATCH] fusioninventory integration

---
 app/src/main/java/org/fusioninventory/Accueil.java | 297 -------------
 app/src/main/java/org/fusioninventory/Agent.java   | 472 +++------------------
 .../java/org/fusioninventory/AutoInventory.java    | 378 -----------------
 .../java/org/fusioninventory/BootStartAgent.java   |  39 --
 .../java/org/fusioninventory/FusionInventory.java  | 232 +---------
 .../org/fusioninventory/FusionInventoryApp.java    | 106 -----
 .../java/org/fusioninventory/InventoryTask.java    | 123 ++++--
 .../org/fusioninventory/InventoryTaskAuto.java     | 190 ---------
 .../main/java/org/fusioninventory/Settings.java    |  16 -
 .../java/org/fusioninventory/UrlPreference.java    | 107 -----
 .../org/fusioninventory/categories/Category.java   |   2 -
 .../java/org/fusioninventory/categories/Cpus.java  |   4 +-
 .../org/fusioninventory/categories/Networks.java   |   1 -
 .../fusioninventory/categories/StringUtils.java    |  57 +++
 .../utils/EasySSLSocketFactory.java                | 149 -------
 .../utils/EasyX509TrustManager.java                |  99 -----
 .../org/fusioninventory/utils/StringUtils.java     |  57 ---
 17 files changed, 208 insertions(+), 2142 deletions(-)
 delete mode 100644 app/src/main/java/org/fusioninventory/Accueil.java
 delete mode 100644 app/src/main/java/org/fusioninventory/AutoInventory.java
 delete mode 100644 app/src/main/java/org/fusioninventory/BootStartAgent.java
 delete mode 100644 app/src/main/java/org/fusioninventory/FusionInventoryApp.java
 delete mode 100644 app/src/main/java/org/fusioninventory/InventoryTaskAuto.java
 delete mode 100644 app/src/main/java/org/fusioninventory/Settings.java
 delete mode 100644 app/src/main/java/org/fusioninventory/UrlPreference.java
 create mode 100644 app/src/main/java/org/fusioninventory/categories/StringUtils.java
 delete mode 100644 app/src/main/java/org/fusioninventory/utils/EasySSLSocketFactory.java
 delete mode 100644 app/src/main/java/org/fusioninventory/utils/EasyX509TrustManager.java
 delete mode 100644 app/src/main/java/org/fusioninventory/utils/StringUtils.java

diff --git a/app/src/main/java/org/fusioninventory/Accueil.java b/app/src/main/java/org/fusioninventory/Accueil.java
deleted file mode 100644
index cbee4d6..0000000
--- a/app/src/main/java/org/fusioninventory/Accueil.java
+++ /dev/null
@@ -1,297 +0,0 @@
-package org.fusioninventory;
-
-import java.util.Iterator;
-
-import android.content.ComponentName;
-import android.content.Context;
-import android.content.Intent;
-import android.content.ServiceConnection;
-import android.content.SharedPreferences;
-import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.IBinder;
-import android.os.Message;
-import android.os.Messenger;
-import android.os.RemoteException;
-import android.preference.EditTextPreference;
-import android.preference.ListPreference;
-import android.preference.Preference;
-import android.preference.PreferenceManager;
-import android.preference.Preference.OnPreferenceChangeListener;
-import android.preference.Preference.OnPreferenceClickListener;
-import android.preference.PreferenceActivity;
-import android.util.Log;
-import android.widget.Toast;
-
-public class Accueil extends PreferenceActivity implements
-OnSharedPreferenceChangeListener {
-
-    private Messenger mAgentService = null;
-
-    private String[] STATUS_AGENT = null;
-    private boolean isAgentOk = false;
-    private String barcode = null;
-
-    private boolean notif = false;
-
-    private boolean ssh = false;
-
-    private SharedPreferences customSharedPreference;
-
-    private static final String TAG = "DroidSSHd";
-    final Handler mHandler = new Handler();
-    private long mUpdateUIdelay = 500L;
-    private Intent mDropbearDaemonHandlerService;
-
-    public Messenger getmAgentService(){
-        return mAgentService;
-    }
-
-    public static void log(Object obj, String msg, int level) {
-        String final_msg = String.format("[%s] %s", obj.getClass().getName(), msg);
-        Log.println(level, "FusionInventory", final_msg);
-    }
-
-    class IncomingHandler
-            extends Handler {
-            @Override
-                public void handleMessage(Message msg) {
-                    // TODO Auto-generated method stub
-                    Accueil.log(this, " message received " + msg.toString(), Log.INFO);
-
-                    switch (msg.what) {
-
-                        case Agent.MSG_AGENT_STATUS:
-
-                            Accueil.log(this, STATUS_AGENT[msg.arg1], Log.INFO);
-                            isAgentOk = (msg.arg1 == 0 ? true : false);
-                            break;
-                        case Agent.MSG_INVENTORY_FINISHED:
-
-                            try {
-                                mAgentService.send(Message.obtain(null, Agent.MSG_INVENTORY_RESULT));
-                            } catch (RemoteException e) {
-                                // TODO Auto-generated catch block
-                                e.printStackTrace();
-                            }
-                            break;
-
-                        case Agent.MSG_INVENTORY_RESULT:
-                            Bundle bXML = msg.peekData();
-                            if (bXML != null) {
-                                try {
-                                    mAgentService.send(Message.obtain(null, Agent.MSG_AGENT_STATUS));
-                                } catch (RemoteException e) {
-                                    // TODO Auto-generated catch block
-                                    e.printStackTrace();
-                                }
-                            }
-                            break;
-
-                        default:
-                            super.handleMessage(msg);
-                    }
-                }
-    }
-
-    final Messenger mMessenger = new Messenger(new IncomingHandler());
-
-    private ServiceConnection mConnection = new ServiceConnection() {
-
-        @Override
-            public void onServiceConnected(ComponentName name, IBinder service) {
-
-                mAgentService = new Messenger(service);
-
-                try {
-                    Message msg = Message.obtain();
-                    msg.replyTo = mMessenger;
-                    msg.what = Agent.MSG_CLIENT_REGISTER;
-                    mAgentService.send(msg);
-
-                    mAgentService.send(Message.obtain(null, Agent.MSG_AGENT_STATUS));
-                } catch (RemoteException e) {
-                    // TODO Auto-generated catch block
-                    e.printStackTrace();
-                }
-
-                if (notif){
-                    Toast.makeText(Accueil.this, R.string.agent_connected, Toast.LENGTH_SHORT).show();
-                }
-            }
-
-        @Override
-            public void onServiceDisconnected(ComponentName name) {
-                isAgentOk = false;
-                mAgentService = null;
-
-                if (notif){
-                    Toast.makeText(Accueil.this, R.string.agent_disconnected, Toast.LENGTH_SHORT).show();
-                }
-            }
-    };
-
-    private boolean mIsBound = false;
-
-    void doBindService() {
-        // Establish a connection with the service. We use an explicit
-        // class name because we want a specific service implementation that
-        // we know will be running in our own process (and thus won't be
-        // supporting component replacement by other applications).
-
-        // mIsBound = bindService(new Intent(FusionInventory.this, Agent.class),
-        // mConnection, Context.BIND_AUTO_CREATE);
-
-        ComponentName result = startService(new Intent("org.fusioninventory.Agent"));
-        if (result != null) {
-            Accueil.log(this, " Agent started ", Log.INFO);
-        } else {
-            Accueil.log(this, " Agent already started ", Log.ERROR);
-        }
-
-        mIsBound = bindService(new Intent(Accueil.this, Agent.class), mConnection, Context.BIND_NOT_FOREGROUND);
-
-        if (mIsBound) {
-            Accueil.log(this, "Connected sucessfully to Agent service", Log.INFO);
-        } else {
-            Accueil.log(this, "Failed to connect to Agent service", Log.ERROR);
-        }
-
-    }
-
-    void doUnbindService() {
-        if (mIsBound) {
-            // Detach our existing connection.
-            unbindService(mConnection);
-            mIsBound = false;
-        }
-    }
-
-
-    @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-            STATUS_AGENT = getResources().getStringArray(R.array.agent_status);
-
-            addPreferencesFromResource(R.xml.accueil);
-
-            doBindService();
-
-            customSharedPreference = PreferenceManager.getDefaultSharedPreferences(this);
-            notif = customSharedPreference.getBoolean("notif", false);
-
-            Preference autoStartInventory = findPreference("autoStartInventory");
-            autoStartInventory.setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
-                public boolean onPreferenceChange(Preference arg0,
-                    Object arg1) {
-                    // TODO Auto-generated method stub
-
-                    notif = customSharedPreference.getBoolean("notif", false);
-
-                    if (notif){
-                        Toast.makeText(getBaseContext(), R.string.agent_reboot, Toast.LENGTH_SHORT).show();
-                    }
-
-                    stopService(new Intent("org.fusioninventory.Agent"));
-                    startService(new Intent("org.fusioninventory.Agent"));
-
-                    return true;
-                }
-
-            });
-
-            Preference timeInventory = findPreference("timeInventory");
-            timeInventory.setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
-                public boolean onPreferenceChange(Preference arg0,
-                    Object arg1) {
-                    // TODO Auto-generated method stub
-
-                    notif = customSharedPreference.getBoolean("notif", false);
-
-                    if (notif){
-                        Toast.makeText(getBaseContext(), R.string.agent_reboot,Toast.LENGTH_SHORT).show();
-                    }
-
-                    stopService(new Intent("org.fusioninventory.Agent"));
-                    startService(new Intent("org.fusioninventory.Agent"));
-
-                    return true;
-                }
-
-            });
-
-            Preference runInventory = findPreference("runInventory");
-            runInventory.setOnPreferenceClickListener(new OnPreferenceClickListener() {
-                public boolean onPreferenceClick(Preference preference) {
-                    Message msg;
-
-                    if (isAgentOk) {
-                        try {
-
-                            Toast.makeText(Accueil.this, R.string.inventory_started, Toast.LENGTH_LONG).show();
-
-                            isAgentOk = false;
-
-                            msg = Message.obtain(null, Agent.MSG_INVENTORY_START);
-                            msg.replyTo = mMessenger;
-                            if (barcode != null) {
-                                Bundle b = new Bundle();
-                                b.putString("BARCODE", barcode);
-                                msg.setData(b);
-                            }
-                            mAgentService.send(msg);
-
-
-                        } catch (RemoteException e) {
-                            // TODO Auto-generated catch block
-                            e.printStackTrace();
-                        }
-
-                        isAgentOk = true;
-                    }
-
-                    if (isAgentOk) {
-
-                        isAgentOk = false;
-
-                        msg = Message.obtain(null, Agent.MSG_INVENTORY_SEND);
-                        msg.replyTo = mMessenger;
-                        try {
-                            mAgentService.send(msg);
-                        } catch (RemoteException e) {
-                            // TODO Auto-generated catch block
-                            e.printStackTrace();
-                        }
-
-                        isAgentOk = true;
-                    }
-
-                    return true;
-                }
-
-            });
-        }
-
-    protected void onResume() {
-        super.onResume();
-        getPreferenceScreen().getSharedPreferences().registerOnSharedPreferenceChangeListener( this );
-    }
-
-    protected void onPause() {
-        super.onPause();
-        getPreferenceScreen().getSharedPreferences().unregisterOnSharedPreferenceChangeListener( this );
-    }
-
-    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
-        Preference pref = findPreference(key);
-        if (pref instanceof EditTextPreference) {
-            EditTextPreference editextp = (EditTextPreference) pref;
-            pref.setSummary(editextp.getText());
-        }
-        if (pref instanceof ListPreference) {
-            ListPreference listp = (ListPreference) pref;
-            pref.setSummary(listp.getValue());
-        }
-    }
-}
diff --git a/app/src/main/java/org/fusioninventory/Agent.java b/app/src/main/java/org/fusioninventory/Agent.java
index e527a62..8abf585 100644
--- a/app/src/main/java/org/fusioninventory/Agent.java
+++ b/app/src/main/java/org/fusioninventory/Agent.java
@@ -1,473 +1,113 @@
 package org.fusioninventory;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.UnsupportedEncodingException;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.Calendar;
-
-import org.apache.http.Header;
-import org.apache.http.HttpException;
-import org.apache.http.HttpRequest;
-import org.apache.http.HttpRequestInterceptor;
-import org.apache.http.HttpResponse;
-import org.apache.http.HttpVersion;
-import org.apache.http.auth.AuthScope;
-import org.apache.http.auth.UsernamePasswordCredentials;
-import org.apache.http.client.ClientProtocolException;
-import org.apache.http.client.CredentialsProvider;
-import org.apache.http.client.methods.HttpPost;
-import org.apache.http.conn.ClientConnectionManager;
-import org.apache.http.conn.scheme.PlainSocketFactory;
-import org.apache.http.conn.scheme.Scheme;
-import org.apache.http.conn.scheme.SchemeRegistry;
-import org.apache.http.entity.StringEntity;
-import org.apache.http.impl.client.BasicCredentialsProvider;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.impl.conn.SingleClientConnManager;
-import org.apache.http.params.BasicHttpParams;
-import org.apache.http.params.HttpParams;
-import org.apache.http.params.HttpProtocolParams;
-import org.apache.http.protocol.BasicHttpContext;
-import org.apache.http.protocol.HttpContext;
-import org.fusioninventory.utils.EasySSLSocketFactory;
-
 import android.app.AlarmManager;
-import android.app.Notification;
-import android.app.NotificationManager;
-import android.app.PendingIntent;
 import android.app.Service;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Binder;
-import android.os.Bundle;
-import android.os.Handler;
 import android.os.IBinder;
-import android.os.Message;
-import android.os.Messenger;
-import android.os.RemoteException;
 import android.preference.PreferenceManager;
+import android.support.annotation.Nullable;
 import android.util.Log;
-import android.widget.Toast;
-
-public class Agent
-    extends Service {
-
-    private NotificationManager mNM;

-    private Notification notification;
+import java.util.Calendar;

-    private PendingIntent contentIntent;
+public class Agent
+        extends Service {

-    private Messenger client = null;
     public InventoryTask inventory = null;

     static final int MSG_CLIENT_REGISTER = 0;
     static final int MSG_AGENT_STATUS = 1;
     static final int MSG_INVENTORY_START = 2;
-    static final int MSG_INVENTORY_PROGRESS = 3;
     static final int MSG_INVENTORY_FINISHED = 4;
-    static final int MSG_REQUEST_INVENTORY = 5;
     static final int MSG_INVENTORY_RESULT = 6;
     static final int MSG_INVENTORY_SEND = 7;

-    static final int STATUS_AGENT_IDLE = 0;
-    static final int STATUS_AGENT_WORKING = 1;
-
-    private int status_agent = 0;
-
-    private String lastXMLResult = null;
-    private String lastSendResult = null;

-    private ClientConnectionManager clientConnectionManager;
-    private HttpContext context;
-    private HttpParams params;
-    private SchemeRegistry mSchemeRegistry = new SchemeRegistry();
-
-    private FusionInventoryApp mFusionApp = null;
+    private static String TAG = "Agent";

     AlarmManager am;
     private	Calendar cal = Calendar.getInstance();

-    private boolean notif = false;
-
-    class IncomingHandler
-            extends Handler {
-            @Override
-                public void handleMessage(Message msg) {
-
-                    Message reply = Message.obtain();
-
-                    Accueil.log(this, "message received " + msg.toString(), Log.INFO);
-
-                    switch (msg.what) {
-
-                        case Agent.MSG_CLIENT_REGISTER:
-                            client = msg.replyTo;
-                            break;
-
-                        case Agent.MSG_AGENT_STATUS:
-
-                            status_agent = inventory.running ? 1 : 0;
-                            reply.what = MSG_AGENT_STATUS;
-                            reply.arg1 = status_agent;
-                            Accueil.log(this, "URL server = " + mFusionApp.getUrl(), Log.VERBOSE);
-                            Accueil.log(this, "shouldAutostart = " + mFusionApp.getShouldAutoStart(), Log.VERBOSE);
-                            Accueil.log(this, "mFusionApp = " + mFusionApp.toString(), Log.VERBOSE);
-
-                            try {
-                                Accueil.log(this, "message sent " + msg.toString(), Log.INFO);
-                                if (client != null) {
-                                    client.send(reply);
-                                } else {
-                                    Accueil.log(this, "No client registered", Log.ERROR);
-                                }
-                            } catch (RemoteException e) {
-                                // TODO Auto-generated catch block
-                                e.printStackTrace();
-                            }
-                            break;
-
-                        case Agent.MSG_INVENTORY_START:
-
-                            Accueil.log(this, " received starting inventory task", Log.INFO);
-
-                            if (inventory != null) {
-
-                                if (inventory.running) {
-
-                                    Accueil.log(this, " inventory task is already running ...", Log.WARN);
-                                } else {
-                                    Accueil.log(this, " inventory task not running ...", Log.INFO);
-                                    start_inventory();
-                                }
-                            }
-
-                            break;
-                        case Agent.MSG_INVENTORY_RESULT:
-                            if (client != null) {
-                                reply.what = Agent.MSG_INVENTORY_RESULT;
-
-                                Bundle bXML = new Bundle();
-                                bXML.putString("result", lastXMLResult);
-                                reply.setData(bXML);
-                                try {
-
-                                    client.send(reply);
-
-                                } catch (RemoteException e) {
-                                    // TODO Auto-generated catch block
-                                    e.printStackTrace();
-                                }
-                            }
-                            break;
-
-                        case Agent.MSG_INVENTORY_SEND:
-                            send_inventory();
-                            if (client != null) {
-                                reply.what = Agent.MSG_INVENTORY_RESULT;
-
-                                Bundle bXML = new Bundle();
-                                bXML.putString("html", lastSendResult);
-                                reply.setData(bXML);
-                                try {
-
-                                    client.send(reply);
-
-                                } catch (RemoteException e) {
-                                    // TODO Auto-generated catch block
-                                    e.printStackTrace();
-                                }
-                            }
-                            break;
-                        default:
-                            super.handleMessage(msg);
-                    }
-                }
-    }
-
-    final Messenger mMessenger = new Messenger(new IncomingHandler());
-
-    private int NOTIFICATION = R.string.agent_started;
-
     public class AgentBinder
             extends Binder {
-            Agent getService() {
-                return Agent.this;
-            }
+        Agent getService() {
+            return Agent.this;
+        }
     }

     @Override
-        public void onCreate() {
-
-            SharedPreferences customSharedPreference = PreferenceManager.getDefaultSharedPreferences(this);
-            boolean autoInventory = customSharedPreference.getBoolean("autoStartInventory", false);
-            String timeInventory = customSharedPreference.getString("timeInventory", "Week");
-            notif = customSharedPreference.getBoolean("notif", false);
-
-            if (autoInventory)
+    public void onCreate() {
+        Log.i(TAG, "onCreate: ");
+        SharedPreferences customSharedPreference = PreferenceManager.getDefaultSharedPreferences(this);
+        boolean autoInventory = customSharedPreference.getBoolean("autoStartInventory", false);
+        String timeInventory = customSharedPreference.getString("timeInventory", "Week");
+
+        if (autoInventory)
+        {
+            if (timeInventory.equals("Day"))
             {
-                if (timeInventory.equals("Day"))
-                {
-                    cal.set(Calendar.HOUR_OF_DAY, 18);
-                    cal.set(Calendar.MINUTE, 0);
-                    cal.set(Calendar.SECOND, 0);
-                    cal.set(Calendar.MILLISECOND, 0);
-                }
-                else if(timeInventory.equals("Week"))
-                {
-                    cal.set(Calendar.DAY_OF_WEEK, 1);
-                    cal.set(Calendar.HOUR_OF_DAY, 18);
-                    cal.set(Calendar.MINUTE, 33);
-                    cal.set(Calendar.SECOND, 0);
-                    cal.set(Calendar.MILLISECOND, 0);
-                }
-                else if(timeInventory.equals("Month"))
-                {
-                    cal.set(Calendar.WEEK_OF_MONTH, 1);
-                    cal.set(Calendar.DAY_OF_WEEK, 1);
-                    cal.set(Calendar.HOUR_OF_DAY, 18);
-                    cal.set(Calendar.MINUTE, 0);
-                    cal.set(Calendar.SECOND, 0);
-                    cal.set(Calendar.MILLISECOND, 0);
-                }
-
-                am = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
-                setRepeatingAlarm();
+                cal.set(Calendar.HOUR_OF_DAY, 18);
+                cal.set(Calendar.MINUTE, 0);
+                cal.set(Calendar.SECOND, 0);
+                cal.set(Calendar.MILLISECOND, 0);
             }
-
-            Accueil.log(this, "creating inventory task", Log.INFO);
-
-            mFusionApp = (FusionInventoryApp) getApplication();
-            Accueil.log(this, "FusionInventoryApp = " + mFusionApp.toString(), Log.VERBOSE);
-
-            inventory = new InventoryTask(this);
-
-            mNM = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
-
-            contentIntent = PendingIntent.getActivity(this, 0, new Intent(this, Accueil.class), 0);
-
-            if (notif){
-                notification = new Notification();
-                notification.icon = R.drawable.icon;
-
-                notification.tickerText = getText(R.string.agent_started).toString();
-                updateNotification(getText(R.string.agent_started).toString());
-
-                mNM.notify(NOTIFICATION, notification);
+            else if(timeInventory.equals("Week"))
+            {
+                cal.set(Calendar.DAY_OF_WEEK, 1);
+                cal.set(Calendar.HOUR_OF_DAY, 18);
+                cal.set(Calendar.MINUTE, 33);
+                cal.set(Calendar.SECOND, 0);
+                cal.set(Calendar.MILLISECOND, 0);
+            }
+            else if(timeInventory.equals("Month"))
+            {
+                cal.set(Calendar.WEEK_OF_MONTH, 1);
+                cal.set(Calendar.DAY_OF_WEEK, 1);
+                cal.set(Calendar.HOUR_OF_DAY, 18);
+                cal.set(Calendar.MINUTE, 0);
+                cal.set(Calendar.SECOND, 0);
+                cal.set(Calendar.MILLISECOND, 0);
             }

-            Handler h = new Handler();
-            h.postDelayed(new Runnable() {
-
-                @Override
-                public void run() {
-                    // TODO Auto-generated method stub
-                    mNM.cancel(NOTIFICATION);
-                }
-            }, 1000);
-
+            am = (AlarmManager) getSystemService(Context.ALARM_SERVICE);

         }

-    public void updateNotification(String text) {
-         SharedPreferences customSharedPreference = PreferenceManager.getDefaultSharedPreferences(this);
-         notif = customSharedPreference.getBoolean("notif", false);
+        inventory = new InventoryTask(this);

-        if (notif){
-            notification.setLatestEventInfo(this, getText(R.string.app_name), text, contentIntent);
-        }
     }

-    @Override
-        public int onStartCommand(Intent intent, int flags, int startId) {
-            Accueil.log(this, "Received start id " + startId + ": " + intent, Log.INFO);
-
-            // We want this service to continue running until it is explicitly
-            // stopped, so return sticky.
-
-            // mNM.cancel(NOTIFICATION);
-
-            return START_STICKY;
-        }
-
-    public void start_inventory() {
-

-        inventory.run();
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {

-        lastXMLResult = inventory.toXML();
-
-        if (client != null) {
-            try {
-                client.send(Message.obtain(null, Agent.MSG_INVENTORY_FINISHED));
-            } catch (RemoteException e) {
-                // TODO Auto-generated catch block
-                e.printStackTrace();
-            }
-        }
+        // We want this service to continue running until it is explicitly
+        // stopped, so return sticky.

+        // mNM.cancel(NOTIFICATION);
+        //     start_inventory();
+        return START_STICKY;
     }

-    public void send_inventory() {
-
-        if (lastXMLResult == null) {
-            Accueil.log(this, "No XML Inventory ", Log.ERROR);
-            Toast.makeText(this, R.string.error_inventory, Toast.LENGTH_SHORT).show();
-        }
-        else{
-            Toast.makeText(this, R.string.ok_inventory, Toast.LENGTH_SHORT).show();
-        }
-        URL url = null;
-
-        try {
-            url = new URL(mFusionApp.getUrl());
-        } catch (MalformedURLException e) {
-            // TODO Auto-generated catch block
-            Accueil.log(this, "inventory server url is malformed " + e.getLocalizedMessage(), Log.ERROR);
-            Toast.makeText(this, "Server adress is malformed", Toast.LENGTH_SHORT).show();
-        }
-
-        if (url == null) {
-            Accueil.log(this, "No URL found ", Log.ERROR);
-            Toast.makeText(this, "Server adress not found", Toast.LENGTH_SHORT).show();
-            return;
-        }
-
-        mSchemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
-        // https scheme
-        mSchemeRegistry.register(new Scheme("https", new EasySSLSocketFactory(), 443));
-
-        params = new BasicHttpParams();
-
-        HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);
-        HttpProtocolParams.setContentCharset(params, "UTF-8");
-        HttpProtocolParams.setUseExpectContinue(params, true);
-
-        //Send FusionInventory specific user agent
-        //TODO get App version from manifest or somewhere else
-        HttpProtocolParams.setUserAgent(params, "FusionInventory-Agent-Android_v1.0");
-
-        clientConnectionManager = new SingleClientConnManager(params, mSchemeRegistry);
-        context = new BasicHttpContext();
-
-        // ignore that the ssl cert is self signed
-        String login = mFusionApp.getCredentialsLogin();
-        if (!login.equals("")) {
-            Accueil.log(this, "HTTP credentials given : use it if necessary", Log.VERBOSE);
-            CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
-            credentialsProvider.setCredentials(new AuthScope(url.getHost(), AuthScope.ANY_PORT),
-                    new UsernamePasswordCredentials(mFusionApp.getCredentialsLogin(),
-                        mFusionApp.getCredentialsPassword()));
-            context.setAttribute("http.auth.credentials-provider", credentialsProvider);
-        }
-
-        DefaultHttpClient httpclient = new DefaultHttpClient(clientConnectionManager, params);
-
-        HttpPost post = new HttpPost(url.toExternalForm());
-        httpclient.addRequestInterceptor(new HttpRequestInterceptor() {
-
-            @Override
-            public void process(HttpRequest request, HttpContext context) throws HttpException, IOException {
-                // TODO Auto-generated method stub
-
-
-                for( Header h : request.getAllHeaders()) {
-
-                    Accueil.log(this, "HEADER : "+ h.getName() + "=" + h.getValue(), Log.VERBOSE);
-                }
-
-            }
-        });
-
-        try {
-            post.setEntity(new StringEntity(lastXMLResult));
-        } catch (UnsupportedEncodingException e1) {
-            // TODO Auto-generated catch block
-            e1.printStackTrace();
-        }
-        HttpResponse response = null;
-        try {
-            response = httpclient.execute(post, context);
-        } catch (ClientProtocolException e) {
-            // TODO Auto-generated catch block
-            Accueil.log(this, "Protocol Exception Error : " + e.getLocalizedMessage(), Log.ERROR);
-            Toast.makeText(this, "Server doesn't reply", Toast.LENGTH_SHORT).show();
-            e.printStackTrace();
-        } catch (IOException e) {
-            // TODO Auto-generated catch block
-            Accueil.log(this, "IO error : " + e.getLocalizedMessage(), Log.ERROR);
-            Accueil.log(this, "IO error : " + url.toExternalForm(), Log.ERROR);
-            Toast.makeText(this, "Server doesn't reply", Toast.LENGTH_SHORT).show();
-            e.printStackTrace();
-        }
-        if (response == null) {
-            Accueil.log(this, "No HTTP response ", Log.ERROR);
-            Toast.makeText(this, "Server doesn't reply", Toast.LENGTH_SHORT).show();
-            return;
-        }
-        Header[] headers = response.getAllHeaders();
-        for (Header header : headers) {
-            Accueil.log(this, header.getName() + " -> " + header.getValue(), Log.INFO);
-        }
-        try {
-            InputStream mIS = response.getEntity().getContent();
-            //StringBuilder content = new StringBuilder();
-            BufferedReader r = new BufferedReader(new InputStreamReader(mIS));
-            String line;
-            StringBuilder sb = new StringBuilder();
+    public void start_inventory() {

-            while ((line = r.readLine()) != null) {
-                //content.append(line);
-                Accueil.log(this, line, Log.VERBOSE);
-                sb.append(line + "\n");
-            }
-            this.lastSendResult = sb.toString();
+        Log.i(TAG, "start_inventory: ");
+        //  inventory.execute();

-        } catch (IllegalStateException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        } catch (IOException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        }
-        Toast.makeText(this, "Inventory sent", Toast.LENGTH_SHORT).show();
     }

     @Override
-        public void onDestroy() {
-            // Cancel the persistent notification.
-
-            SharedPreferences customSharedPreference = PreferenceManager.getDefaultSharedPreferences(this);
-            notif = customSharedPreference.getBoolean("notif", false);
-
-            mNM.cancel(NOTIFICATION);
-
-            // Tell the user we stopped.
-            if (notif){
-                Toast.makeText(this, R.string.agent_stopped, Toast.LENGTH_SHORT).show();
-            }
-        }
+    public void onDestroy() {
+        // Cancel the persistent notification.
+        SharedPreferences customSharedPreference = PreferenceManager.getDefaultSharedPreferences(this);
+    }

+    @Nullable
     @Override
-        public IBinder onBind(Intent intent) {
-
-            return mMessenger.getBinder();
-        }
-
-    public void setRepeatingAlarm() {
-        Intent intent = new Intent(this, TimeAlarm.class);
-        PendingIntent pendingIntent = PendingIntent.getBroadcast(this, 0,
-                intent, PendingIntent.FLAG_CANCEL_CURRENT);
-
-        am.set(AlarmManager.RTC_WAKEUP, cal.getTimeInMillis(), pendingIntent);
-
+    public IBinder onBind(Intent intent) {
+        return null;
     }

-
-    // private final IBinder mBinder = new AgentBinder();
 }
diff --git a/app/src/main/java/org/fusioninventory/AutoInventory.java b/app/src/main/java/org/fusioninventory/AutoInventory.java
deleted file mode 100644
index 290efa2..0000000
--- a/app/src/main/java/org/fusioninventory/AutoInventory.java
+++ /dev/null
@@ -1,378 +0,0 @@
-package org.fusioninventory;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.UnsupportedEncodingException;
-import java.net.MalformedURLException;
-import java.net.URL;
-
-import org.apache.http.Header;
-import org.apache.http.HttpException;
-import org.apache.http.HttpRequest;
-import org.apache.http.HttpRequestInterceptor;
-import org.apache.http.HttpResponse;
-import org.apache.http.HttpVersion;
-import org.apache.http.auth.AuthScope;
-import org.apache.http.auth.UsernamePasswordCredentials;
-import org.apache.http.client.ClientProtocolException;
-import org.apache.http.client.CredentialsProvider;
-import org.apache.http.client.methods.HttpPost;
-import org.apache.http.conn.ClientConnectionManager;
-import org.apache.http.conn.scheme.PlainSocketFactory;
-import org.apache.http.conn.scheme.Scheme;
-import org.apache.http.conn.scheme.SchemeRegistry;
-import org.apache.http.entity.StringEntity;
-import org.apache.http.impl.client.BasicCredentialsProvider;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.impl.conn.SingleClientConnManager;
-import org.apache.http.params.BasicHttpParams;
-import org.apache.http.params.HttpParams;
-import org.apache.http.params.HttpProtocolParams;
-import org.apache.http.protocol.BasicHttpContext;
-import org.apache.http.protocol.HttpContext;
-import org.fusioninventory.utils.EasySSLSocketFactory;
-
-import android.app.Service;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.os.Binder;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.IBinder;
-import android.os.Message;
-import android.os.Messenger;
-import android.os.RemoteException;
-import android.preference.PreferenceManager;
-import android.util.Log;
-import android.widget.Toast;
-
-public class AutoInventory
-    extends Service {
-
-    private Messenger client = null;
-    public InventoryTaskAuto inventory = null;
-
-    static final int MSG_CLIENT_REGISTER = 0;
-    static final int MSG_AGENT_STATUS = 1;
-    static final int MSG_INVENTORY_START = 2;
-    static final int MSG_INVENTORY_PROGRESS = 3;
-    static final int MSG_INVENTORY_FINISHED = 4;
-    static final int MSG_REQUEST_INVENTORY = 5;
-    static final int MSG_INVENTORY_RESULT = 6;
-    static final int MSG_INVENTORY_SEND = 7;
-
-    static final int STATUS_AGENT_IDLE = 0;
-    static final int STATUS_AGENT_WORKING = 1;
-
-    private int status_agent = 0;
-
-    private String lastXMLResult = null;
-    private String lastSendResult = null;
-
-    private ClientConnectionManager clientConnectionManager;
-    private HttpContext context;
-    private HttpParams params;
-    private SchemeRegistry mSchemeRegistry = new SchemeRegistry();
-
-    private FusionInventoryApp mFusionApp = null;
-
-    private boolean notif = false;
-
-    class IncomingHandler
-            extends Handler {
-            @Override
-                public void handleMessage(Message msg) {
-
-                    Message reply = Message.obtain();
-
-                    Accueil.log(this, "message received " + msg.toString(), Log.INFO);
-
-                    switch (msg.what) {
-
-                        case Agent.MSG_CLIENT_REGISTER:
-                            client = msg.replyTo;
-                            break;
-
-                        case Agent.MSG_AGENT_STATUS:
-
-                            status_agent = inventory.running ? 1 : 0;
-                            reply.what = MSG_AGENT_STATUS;
-                            reply.arg1 = status_agent;
-                            Accueil.log(this, "URL server = " + mFusionApp.getUrl(), Log.VERBOSE);
-                            Accueil.log(this, "shouldAutostart = " + mFusionApp.getShouldAutoStart(), Log.VERBOSE);
-                            Accueil.log(this, "mFusionApp = " + mFusionApp.toString(), Log.VERBOSE);
-
-                            try {
-                                Accueil.log(this, "message sent " + msg.toString(), Log.INFO);
-                                if (client != null) {
-                                    client.send(reply);
-                                } else {
-                                    Accueil.log(this, "No client registered", Log.ERROR);
-                                }
-                            } catch (RemoteException e) {
-                                // TODO Auto-generated catch block
-                                e.printStackTrace();
-                            }
-                            break;
-
-                        case Agent.MSG_INVENTORY_RESULT:
-                            if (client != null) {
-                                reply.what = Agent.MSG_INVENTORY_RESULT;
-
-                                Bundle bXML = new Bundle();
-                                bXML.putString("result", lastXMLResult);
-                                reply.setData(bXML);
-                                try {
-
-                                    client.send(reply);
-
-                                } catch (RemoteException e) {
-                                    // TODO Auto-generated catch block
-                                    e.printStackTrace();
-                                }
-                            }
-                            break;
-
-                        case Agent.MSG_INVENTORY_SEND:
-                            send_inventory();
-                            if (client != null) {
-                                reply.what = Agent.MSG_INVENTORY_RESULT;
-
-                                Bundle bXML = new Bundle();
-                                bXML.putString("html", lastSendResult);
-                                reply.setData(bXML);
-                                try {
-
-                                    client.send(reply);
-
-                                } catch (RemoteException e) {
-                                    // TODO Auto-generated catch block
-                                    e.printStackTrace();
-                                }
-                            }
-                            break;
-                        default:
-                            super.handleMessage(msg);
-                    }
-                }
-    }
-
-    final Messenger mMessenger = new Messenger(new IncomingHandler());
-
-    public class AgentBinder
-            extends Binder {
-            AutoInventory getService() {
-                return AutoInventory.this;
-            }
-    }
-
-    @Override
-        public void onCreate() {
-
-            inventory = new InventoryTaskAuto(this);
-
-            mFusionApp = (FusionInventoryApp) getApplication();
-
-            SharedPreferences customSharedPreference =
-                PreferenceManager.getDefaultSharedPreferences(this);
-            boolean notif = customSharedPreference.getBoolean("notif", false);
-
-            if (notif){
-                Toast.makeText(this,R.string.inventory_started,Toast.LENGTH_LONG).show();
-            }
-
-            inventory();
-
-            send_inventory();
-
-        }
-
-
-    @Override
-        public int onStartCommand(Intent intent, int flags, int startId) {
-            Accueil.log(this, "Received start id " + startId + ": " + intent, Log.INFO);
-
-            // We want this service to continue running until it is explicitly
-            // stopped, so return sticky.
-
-            // mNM.cancel(NOTIFICATION);
-
-            return START_STICKY;
-        }
-
-    public void send_inventory() {
-
-        SharedPreferences customSharedPreference = PreferenceManager.getDefaultSharedPreferences(this);
-        notif = customSharedPreference.getBoolean("notif", false);
-
-        if (lastXMLResult == null) {
-            Accueil.log(this, "No XML Inventory ", Log.ERROR);
-            if (notif){
-                Toast.makeText(this, R.string.error_inventory, Toast.LENGTH_SHORT).show();
-            }
-        }
-        else{
-            if (notif){
-                Toast.makeText(this, R.string.ok_inventory, Toast.LENGTH_SHORT).show();
-            }
-        }
-        URL url = null;
-
-        try {
-            url = new URL(mFusionApp.getUrl());
-        } catch (MalformedURLException e) {
-            // TODO Auto-generated catch block
-            Accueil.log(this, "inventory server url is malformed " + e.getLocalizedMessage(), Log.ERROR);
-            if (notif){
-                Toast.makeText(this, "Server adress is malformed", Toast.LENGTH_SHORT).show();
-            }
-        }
-
-        if (url == null) {
-            Accueil.log(this, "No URL found ", Log.ERROR);
-            if (notif){
-                Toast.makeText(this, "Server adress not found", Toast.LENGTH_SHORT).show();
-            }
-            return;
-        }
-
-        mSchemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
-        // https scheme
-        mSchemeRegistry.register(new Scheme("https", new EasySSLSocketFactory(), 443));
-
-        params = new BasicHttpParams();
-
-        HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);
-        HttpProtocolParams.setContentCharset(params, "UTF-8");
-        HttpProtocolParams.setUseExpectContinue(params, true);
-
-        //Send FusionInventory specific user agent
-        //TODO get App version from manifest or somewhere else
-        HttpProtocolParams.setUserAgent(params, "FusionInventory-Agent-Android_v1.0");
-
-        clientConnectionManager = new SingleClientConnManager(params, mSchemeRegistry);
-        context = new BasicHttpContext();
-
-        // ignore that the ssl cert is self signed
-        String login = mFusionApp.getCredentialsLogin();
-        if (!login.equals("")) {
-            Accueil.log(this, "HTTP credentials given : use it if necessary", Log.VERBOSE);
-            CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
-            credentialsProvider.setCredentials(new AuthScope(url.getHost(), AuthScope.ANY_PORT),
-                    new UsernamePasswordCredentials(mFusionApp.getCredentialsLogin(),
-                        mFusionApp.getCredentialsPassword()));
-            context.setAttribute("http.auth.credentials-provider", credentialsProvider);
-        }
-
-        DefaultHttpClient httpclient = new DefaultHttpClient(clientConnectionManager, params);
-
-        HttpPost post = new HttpPost(url.toExternalForm());
-        httpclient.addRequestInterceptor(new HttpRequestInterceptor() {
-
-            @Override
-            public void process(HttpRequest request, HttpContext context) throws HttpException, IOException {
-                // TODO Auto-generated method stub
-
-
-                for( Header h : request.getAllHeaders()) {
-
-                    Accueil.log(this, "HEADER : "+ h.getName() + "=" + h.getValue(), Log.VERBOSE);
-                }
-
-            }
-        });
-
-        try {
-            post.setEntity(new StringEntity(lastXMLResult));
-        } catch (UnsupportedEncodingException e1) {
-            // TODO Auto-generated catch block
-            e1.printStackTrace();
-        }
-        HttpResponse response = null;
-        try {
-            response = httpclient.execute(post, context);
-        } catch (ClientProtocolException e) {
-            // TODO Auto-generated catch block
-            Accueil.log(this, "Protocol Exception Error : " + e.getLocalizedMessage(), Log.ERROR);
-            if (notif){
-                Toast.makeText(this, "Server doesn't reply", Toast.LENGTH_SHORT).show();
-            }
-            e.printStackTrace();
-        } catch (IOException e) {
-            // TODO Auto-generated catch block
-            Accueil.log(this, "IO error : " + e.getLocalizedMessage(), Log.ERROR);
-            Accueil.log(this, "IO error : " + url.toExternalForm(), Log.ERROR);
-            if (notif){
-                Toast.makeText(this, "Server doesn't reply", Toast.LENGTH_SHORT).show();
-            }
-            e.printStackTrace();
-        }
-        if (response == null) {
-            Accueil.log(this, "No HTTP response ", Log.ERROR);
-            if (notif){
-                Toast.makeText(this, "Server doesn't reply", Toast.LENGTH_SHORT).show();
-            }
-            return;
-        }
-        Header[] headers = response.getAllHeaders();
-        for (Header header : headers) {
-            Accueil.log(this, header.getName() + " -> " + header.getValue(), Log.INFO);
-        }
-        try {
-            InputStream mIS = response.getEntity().getContent();
-            //StringBuilder content = new StringBuilder();
-            BufferedReader r = new BufferedReader(new InputStreamReader(mIS));
-            String line;
-            StringBuilder sb = new StringBuilder();
-
-            while ((line = r.readLine()) != null) {
-                //content.append(line);
-                Accueil.log(this, line, Log.VERBOSE);
-                sb.append(line + "\n");
-            }
-            this.lastSendResult = sb.toString();
-
-        } catch (IllegalStateException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        } catch (IOException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        }
-        if (notif){
-            Toast.makeText(this, "Inventory sent", Toast.LENGTH_SHORT).show();
-        }
-    }
-
-    public void inventory() {
-
-        inventory.run();
-
-        lastXMLResult = inventory.toXML();
-
-        if (client != null) {
-            try {
-                client.send(Message.obtain(null, Agent.MSG_INVENTORY_FINISHED));
-            } catch (RemoteException e) {
-                // TODO Auto-generated catch block
-                e.printStackTrace();
-            }
-        }
-
-    }
-
-    @Override
-        public void onDestroy() {
-
-        }
-
-    @Override
-        public IBinder onBind(Intent intent) {
-
-            return mMessenger.getBinder();
-        }
-
-    // private final IBinder mBinder = new AgentBinder();
-}
diff --git a/app/src/main/java/org/fusioninventory/BootStartAgent.java b/app/src/main/java/org/fusioninventory/BootStartAgent.java
deleted file mode 100644
index bf51ab5..0000000
--- a/app/src/main/java/org/fusioninventory/BootStartAgent.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package org.fusioninventory;
-
-import org.fusioninventory.utils.StringUtils;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
-import android.util.Log;
-
-public class BootStartAgent extends BroadcastReceiver {
-
-    @Override
-    public void onReceive(Context ctx, Intent intent) {
-        // TODO Auto-generated method stub
-        SharedPreferences prefs = PreferenceManager
-                .getDefaultSharedPreferences(ctx);
-
-        boolean shouldAutoStart = prefs.getBoolean("boot", false);
-
-        FusionInventory.log(this, String.format("Intent %s Category %s",
-                intent.getAction(),
-                StringUtils.join(intent.getCategories(), " , ")), Log.INFO);
-
-        if (shouldAutoStart) {
-            FusionInventory.log(this,
-                    "FusionInventory Agent is being started automatically",
-                    Log.INFO);
-            Intent serviceIntent = new Intent();
-            serviceIntent.setAction("org.fusioninventory.Agent");
-            ctx.startService(serviceIntent);
-        } else {
-            FusionInventory.log(this,
-                    "FusionInventory Agent will not be started automatically",
-                    Log.INFO);
-        }
-    }
-}
diff --git a/app/src/main/java/org/fusioninventory/FusionInventory.java b/app/src/main/java/org/fusioninventory/FusionInventory.java
index c80f9f8..3607f28 100644
--- a/app/src/main/java/org/fusioninventory/FusionInventory.java
+++ b/app/src/main/java/org/fusioninventory/FusionInventory.java
@@ -2,175 +2,27 @@ package org.fusioninventory;

 import android.app.Activity;

-import android.content.ComponentName;
-import android.content.Context;
-import android.content.Intent;
-import android.content.ServiceConnection;
 import android.os.Bundle;
-import android.os.Handler;
-import android.os.IBinder;
-import android.os.Message;
-import android.os.Messenger;
-import android.os.RemoteException;
-import android.text.method.ScrollingMovementMethod;
 import android.util.Log;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.webkit.WebView;
-import android.widget.TextView;
-import android.widget.Toast;

 public class FusionInventory
         extends Activity {

-    private Messenger mAgentService = null;

-    private TextView log_text = null;
-    private WebView web_text = null;
-    // private Button start_button = null;
-    private String[] STATUS_AGENT = null;
-    private boolean isAgentOk = false;
-    private String barcode = null;
-
     public static void log(Object obj, String msg, int level) {
         String final_msg = String.format("[%s] %s", obj.getClass().getName(), msg);
         Log.println(level, "FusionInventory", final_msg);
     }

-    class IncomingHandler
-            extends Handler {
-        @Override
-        public void handleMessage(Message msg) {
-            // TODO Auto-generated method stub
-            FusionInventory.log(this, " message received " + msg.toString(), Log.INFO);
-
-            switch (msg.what) {
-
-            case Agent.MSG_AGENT_STATUS:
-
-                // log_text.setText(STATUS_AGENT[msg.arg1]);
-                FusionInventory.log(this, STATUS_AGENT[msg.arg1], Log.INFO);
-                // start_button.setEnabled(msg.arg1 == 0 ? true : false);
-                isAgentOk = (msg.arg1 == 0 ? true : false);
-                break;
-            case Agent.MSG_INVENTORY_FINISHED:
-
-                try {
-                    mAgentService.send(Message.obtain(null, Agent.MSG_INVENTORY_RESULT));
-                } catch (RemoteException e) {
-                    // TODO Auto-generated catch block
-                    e.printStackTrace();
-                }
-                break;
-
-            case Agent.MSG_INVENTORY_RESULT:
-                Bundle bXML = msg.peekData();
-                if (bXML != null) {
-                    log_text.setText(bXML.getString("result"));
-                    web_text.loadData(bXML.getString("html"), "text/html", "utf-8");
-                    try {
-                        mAgentService.send(Message.obtain(null, Agent.MSG_AGENT_STATUS));
-                    } catch (RemoteException e) {
-                        // TODO Auto-generated catch block
-                        e.printStackTrace();
-                    }
-                }
-                break;
-
-            default:
-                super.handleMessage(msg);
-            }
-        }
-    }
-
-    final Messenger mMessenger = new Messenger(new IncomingHandler());
-
-    private ServiceConnection mConnection = new ServiceConnection() {
-
-        @Override
-        public void onServiceConnected(ComponentName name, IBinder service) {
-
-            mAgentService = new Messenger(service);
-
-            try {
-                Message msg = Message.obtain();
-                msg.replyTo = mMessenger;
-                msg.what = Agent.MSG_CLIENT_REGISTER;
-                mAgentService.send(msg);
-
-                mAgentService.send(Message.obtain(null, Agent.MSG_AGENT_STATUS));
-            } catch (RemoteException e) {
-                // TODO Auto-generated catch block
-                e.printStackTrace();
-            }
-
-            Toast.makeText(FusionInventory.this, R.string.agent_connected, Toast.LENGTH_SHORT).show();
-        }
-
-        @Override
-        public void onServiceDisconnected(ComponentName name) {
-            isAgentOk = false;
-            mAgentService = null;
-            Toast.makeText(FusionInventory.this, R.string.agent_disconnected, Toast.LENGTH_SHORT).show();
-        }
-    };
-
-    private boolean mIsBound = false;
-
-    void doBindService() {
-        // Establish a connection with the service. We use an explicit
-        // class name because we want a specific service implementation that
-        // we know will be running in our own process (and thus won't be
-        // supporting component replacement by other applications).
-
-        // mIsBound = bindService(new Intent(FusionInventory.this, Agent.class),
-        // mConnection, Context.BIND_AUTO_CREATE);
-
-        ComponentName result = startService(new Intent("org.fusioninventory.Agent"));
-        if (result != null) {
-            FusionInventory.log(this, " Agent started ", Log.INFO);
-        } else {
-            FusionInventory.log(this, " Agent already started ", Log.ERROR);
-        }
-
-        mIsBound = bindService(new Intent(FusionInventory.this, Agent.class), mConnection, Context.BIND_NOT_FOREGROUND);
-
-        if (mIsBound) {
-            FusionInventory.log(this, "Connected sucessfully to Agent service", Log.INFO);
-        } else {
-            FusionInventory.log(this, "Failed to connect to Agent service", Log.ERROR);
-        }
-
-    }
-
-    void doUnbindService() {
-        if (mIsBound) {
-            // Detach our existing connection.
-            unbindService(mConnection);
-            mIsBound = false;
-        }
-    }
-
     /** Called when the activity is first created. */
     /*
      * (non-Javadoc)
-     *
+     *
      * @see android.app.Activity#onCreate(android.os.Bundle)
      */
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        STATUS_AGENT = getResources().getStringArray(R.array.agent_status);
-
-        setContentView(R.layout.main);
-
-        doBindService();
-
-        log_text = (TextView) findViewById(R.id.log_text);
-        log_text.setMovementMethod(new ScrollingMovementMethod());
-
-        web_text = (WebView) findViewById(R.id.web_text);

     }

@@ -178,14 +30,12 @@ public class FusionInventory
     protected void onDestroy() {
         super.onDestroy();
         FusionInventory.log(this, "OnDestroy()", Log.INFO);
-        doUnbindService();
     }

     @Override
     protected void onPause() {
         // TODO Auto-generated method stub
         super.onPause();
-        doUnbindService();
         FusionInventory.log(this, "OnPause()", Log.INFO);

     }
@@ -194,87 +44,9 @@ public class FusionInventory
     protected void onResume() {
         // TODO Auto-generated method stub
         super.onResume();
-        doBindService();
         FusionInventory.log(this, "OnResume()", Log.INFO);

     }

-    @Override
-    public boolean onCreateOptionsMenu(Menu menu) {
-        // TODO Auto-generated method stub
-        MenuInflater inflater = getMenuInflater();
-        inflater.inflate(R.menu.menu_main, menu);
-        return true;
-    }
-
-    @Override
-    public boolean onPrepareOptionsMenu(Menu menu) {
-        // TODO Auto-generated method stub
-        MenuItem mMenu_getinv = menu.findItem(R.id.menu_getinv);
-        MenuItem mMenu_send = menu.findItem(R.id.menu_send);
-
-        mMenu_getinv.setEnabled(isAgentOk);
-        mMenu_send.setEnabled(isAgentOk);
-
-        return true;
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        Message msg;
-        // TODO Auto-generated method stub
-        switch (item.getItemId()) {
-
-        case R.id.menu_clearlog:
-            log_text.setText("");
-            return true;
-
-        case R.id.menu_settings:
-            Intent settings = new Intent(this, Settings.class);
-            startActivity(settings);
-            return true;
-
-        case R.id.menu_send:
-
-            if (isAgentOk) {
-                msg = Message.obtain(null, Agent.MSG_INVENTORY_SEND);
-                msg.replyTo = mMessenger;
-                try {
-                    mAgentService.send(msg);
-                } catch (RemoteException e) {
-                    // TODO Auto-generated catch block
-                    e.printStackTrace();
-                }
-            }
-            return true;
-
-        case R.id.menu_getinv:
-            if (isAgentOk) {
-                try {
-
-                    isAgentOk = false;
-
-                    msg = Message.obtain(null, Agent.MSG_INVENTORY_START);
-                    msg.replyTo = mMessenger;
-                    if (barcode != null) {
-                        Bundle b = new Bundle();
-                        b.putString("BARCODE", barcode);
-                        msg.setData(b);
-                    }
-                    mAgentService.send(msg);
-
-
-                } catch (RemoteException e) {
-                    // TODO Auto-generated catch block
-                    e.printStackTrace();
-                }
-            }
-            return true;
-        default:
-            return super.onOptionsItemSelected(item);
-        }
-
-    }
-

-}
+}
\ No newline at end of file
diff --git a/app/src/main/java/org/fusioninventory/FusionInventoryApp.java b/app/src/main/java/org/fusioninventory/FusionInventoryApp.java
deleted file mode 100644
index f6f2019..0000000
--- a/app/src/main/java/org/fusioninventory/FusionInventoryApp.java
+++ /dev/null
@@ -1,106 +0,0 @@
-package org.fusioninventory;
-
-import android.app.Application;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
-import android.preference.PreferenceManager;
-import android.telephony.TelephonyManager;
-import android.text.format.DateFormat;
-import android.util.Log;
-
-public class FusionInventoryApp
-        extends Application
-        implements OnSharedPreferenceChangeListener {
-
-    private SharedPreferences prefs;
-    public Boolean mShouldAutoStart = null;
-    public String mUrl = null;
-    public String mTag = null;
-    public String mLogin = null;
-    public String mPassword = null;
-    public String mDeviceID = null;
-
-    @Override
-    public void onCreate() {
-        // TODO Auto-generated method stub
-        super.onCreate();
-
-        prefs = PreferenceManager.getDefaultSharedPreferences(this);
-        prefs.registerOnSharedPreferenceChangeListener(this);
-
-        //prefs.edit().remove("device_id").commit();
-
-        String device_id = prefs.getString("device_id", null);
-
-        FusionInventory.log(this, device_id, Log.VERBOSE);
-
-
-        if(device_id == null) {
-
-           TelephonyManager mTM= (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
-           prefs.edit()
-                .putString("device_id", String.format("%s-%s",mTM.getDeviceId(),DateFormat.format("yyyy-MM-dd-kk-mm-ss", System.currentTimeMillis())))
-                .commit();
-        }
-
-
-    }
-
-
-    public String getDeviceID(){
-        if (mDeviceID == null) {
-            mDeviceID = prefs.getString("device_id","<not set>");
-        }
-        return mDeviceID;
-    }
-
-    public Boolean getShouldAutoStart() {
-
-        if (mShouldAutoStart == null) {
-
-            mShouldAutoStart = Boolean.valueOf(prefs.getBoolean("boot", false));
-
-        }
-        return mShouldAutoStart;
-
-    }
-
-    public String getUrl() {
-        if (mUrl == null) {
-            mUrl = prefs.getString("url", "");
-        }
-        return mUrl;
-    }
-
-    @Override
-    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
-        // TODO Auto-generated method stub
-
-        mUrl = null;
-        mShouldAutoStart = null;
-        FusionInventory.log(this, "FusionInventoryApp = " + this.toString(), Log.VERBOSE);
-    }
-
-    public String getCredentialsLogin() {
-        if (mLogin == null) {
-        	mLogin = prefs.getString("login", "");
-        }
-        return mLogin;
-    }
-
-    public String getCredentialsPassword() {
-        if (mPassword == null) {
-        	mPassword = prefs.getString("password", "");
-        }
-        return mPassword;
-    }
-
-    public String getTag() {
-        if (mTag == null) {
-        	mTag = prefs.getString("tag", "");
-        }
-        return mTag;
-    }
-
-}
diff --git a/app/src/main/java/org/fusioninventory/InventoryTask.java b/app/src/main/java/org/fusioninventory/InventoryTask.java
index beea369..484a5c5 100644
--- a/app/src/main/java/org/fusioninventory/InventoryTask.java
+++ b/app/src/main/java/org/fusioninventory/InventoryTask.java
@@ -1,6 +1,12 @@
 package org.fusioninventory;

+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStreamWriter;
 import java.io.StringWriter;
+import java.io.Writer;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
@@ -10,38 +16,34 @@ import org.fusioninventory.categories.Categories;
 import org.xmlpull.v1.XmlSerializer;

 import android.content.Context;
+import android.content.Intent;
+import android.os.AsyncTask;
+import android.os.Build;
 import android.text.format.DateFormat;
 import android.util.Log;
 import android.util.Xml;

-public class InventoryTask {
+import com.teclib.service.MQTTService;
+
+public class InventoryTask extends AsyncTask<String, Void, String> {

-    /*
-     * TODO: Implémenter l'inventaire sous forme de Hashmap/Hashtable
-     * <string,string> pour le moment
-     */

     public ArrayList<Categories> mContent = null;
     public Date mStart = null, mEnd = null;
     public Context ctx = null;
     static final int OK = 0;
     static final int NOK = 1;
+    public static final String FusionVersion = "FlyveMDM-Agent_v1.0";

-    public Boolean running = false;
     public int progress = 0;

-    private Agent mAgent;
-    private FusionInventoryApp mFusionApp;
-
-    public InventoryTask(Agent agent) {
-        mAgent= agent;
-        ctx = mAgent.getApplicationContext();
-        mFusionApp = (FusionInventoryApp) mAgent.getApplication();
-        FusionInventory.log(this, "FusionInventoryApp = " + mFusionApp.toString(), Log.VERBOSE);
+    public InventoryTask(Context context) {
+        ctx = context;
+        FusionInventory.log(this, "FusionInventoryApp = ", Log.VERBOSE);
     }

-    public String toXML() {
-
+    public boolean toXML() {
+        Log.i("FusionInventoryApp", "toXML: ");
         if (mContent != null) {

             XmlSerializer serializer = Xml.newSerializer();
@@ -63,8 +65,12 @@ public class InventoryTask {
                 serializer.text("INVENTORY");
                 serializer.endTag(null, "QUERY");

+                serializer.startTag(null, "VERSIONCLIENT");
+                serializer.text(FusionVersion);
+                serializer.endTag(null, "VERSIONCLIENT");
+
                 serializer.startTag(null, "DEVICEID");
-                serializer.text(mFusionApp.getDeviceID());
+                serializer.text(Build.SERIAL);
                 serializer.endTag(null, "DEVICEID");

                 serializer.startTag(null, "CONTENT");
@@ -85,16 +91,17 @@ public class InventoryTask {
                 // End ACCESSLOG

                 //Manage accountinfos :: TAG
-                if (!mFusionApp.getTag().equals("")) {
-                	serializer.startTag(null, "ACCOUNTINFO");
-                	serializer.startTag(null, "KEYNAME");
-                    serializer.text("TAG");
-                    serializer.endTag(null, "KEYNAME");
-                	serializer.startTag(null, "KEYVALUE");
-                    serializer.text(mFusionApp.getTag());
-                    serializer.endTag(null, "KEYVALUE");
-                    serializer.endTag(null, "ACCOUNTINFO");
-                }
+                //   if (!mFusionApp.getTag().equals("")) {
+                serializer.startTag(null, "ACCOUNTINFO");
+                serializer.startTag(null, "KEYNAME");
+                serializer.text("TAG");
+                serializer.endTag(null, "KEYNAME");
+                serializer.startTag(null, "KEYVALUE");
+                //serializer.text(mFusionApp.getTag());
+                serializer.text("");
+                serializer.endTag(null, "KEYVALUE");
+                serializer.endTag(null, "ACCOUNTINFO");
+                //    }

                 for (Categories cat : mContent) {

@@ -104,26 +111,45 @@ public class InventoryTask {
                 serializer.endTag(null, "CONTENT");
                 serializer.endTag(null, "REQUEST");
                 serializer.endDocument();
-                return (writer.toString());
+                WriteStringToFile(writer.toString());
+                return true;
             } catch (Exception e) {
                 // TODO: handle exception
                 throw new RuntimeException(e);
             }

         }
-        return null;
+        return false;
+    }
+
+    public void WriteStringToFile (String data) {
+        Writer writer = null;
+        try {
+            writer = new OutputStreamWriter(new FileOutputStream(new File(ctx.getFilesDir(),"/android_inventory.xml")));
+            writer.write(data);
+        } catch (FileNotFoundException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } finally {
+            if (writer != null)
+                try {
+                    writer.close();
+                } catch (IOException e) {
+                    // TODO Auto-generated catch block
+                    e.printStackTrace();
+                }
+        }
     }

-
-    @SuppressWarnings("unchecked")
-    public synchronized void run() {
-
-        running = true;
+
+    @Override
+    protected String doInBackground(String... params) {
         mStart = new Date();

         mContent = new ArrayList<Categories>();
-
-        String [] categories = {
+
+        String [] categories = {
 //                "PhoneStatus",
                 "Hardware",
                 "Bios",
@@ -141,12 +167,12 @@ public class InventoryTask {
                 "Jvm",
                 "Softwares",
                 "Usb",
-//              "Battery",
+                "Battery",
 //              "BluetoothAdapterCategory", // <- there is already a BluetoothAdapter class in android SDK
         };
-
+
         Class<Categories> cat_class;
-
+
         for(String c : categories) {
             cat_class = null;
             FusionInventory.log(this, String.format("INVENTORY of %s", c),Log.VERBOSE);
@@ -159,7 +185,7 @@ public class InventoryTask {
             if(cat_class!=null) {
                 try {
                     Constructor<Categories> co = cat_class.getConstructor(Context.class);
-                    mContent.add(co.newInstance(mFusionApp));
+                    mContent.add(co.newInstance(ctx));
                 } catch (SecurityException e) {
                     // TODO Auto-generated catch block
                     e.printStackTrace();
@@ -178,13 +204,24 @@ public class InventoryTask {
                 } catch (InvocationTargetException e) {
                     // TODO Auto-generated catch block
                     e.printStackTrace();
-                }
+
+                }
             }
         }
-

         FusionInventory.log(this, "end of inventory", Log.INFO);
         mEnd = new Date();
-        running = false;
+        return "true";
+    }
+
+    @Override
+    protected void onPostExecute(String result) {
+        if(result.equals("true")){
+            toXML();
+            Intent mqttstop = new Intent(ctx , MQTTService.class);
+            mqttstop.setAction(MQTTService.ACTION_INVENTORY);
+            ctx.startService(mqttstop);
+        }
+
     }
 }
diff --git a/app/src/main/java/org/fusioninventory/InventoryTaskAuto.java b/app/src/main/java/org/fusioninventory/InventoryTaskAuto.java
deleted file mode 100644
index cda5d2a..0000000
--- a/app/src/main/java/org/fusioninventory/InventoryTaskAuto.java
+++ /dev/null
@@ -1,190 +0,0 @@
-package org.fusioninventory;
-
-import java.io.StringWriter;
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
-import java.util.ArrayList;
-import java.util.Date;
-
-import org.fusioninventory.categories.Categories;
-import org.xmlpull.v1.XmlSerializer;
-
-import android.content.Context;
-import android.text.format.DateFormat;
-import android.util.Log;
-import android.util.Xml;
-
-public class InventoryTaskAuto {
-
-    /*
-     * TODO: Implémenter l'inventaire sous forme de Hashmap/Hashtable
-     * <string,string> pour le moment
-     */
-
-    public ArrayList<Categories> mContent = null;
-    public Date mStart = null, mEnd = null;
-    public Context ctx = null;
-    static final int OK = 0;
-    static final int NOK = 1;
-
-    public Boolean running = false;
-    public int progress = 0;
-
-    private AutoInventory mAgent;
-    private FusionInventoryApp mFusionApp;
-
-    public InventoryTaskAuto(AutoInventory test) {
-        mAgent= test;
-        ctx = mAgent.getApplicationContext();
-        mFusionApp = (FusionInventoryApp) mAgent.getApplication();
-        Accueil.log(this, "FusionInventoryApp = " + mFusionApp.toString(), Log.VERBOSE);
-    }
-
-    public String toXML() {
-
-        if (mContent != null) {
-
-            XmlSerializer serializer = Xml.newSerializer();
-            StringWriter writer = new StringWriter();
-
-            try {
-                serializer.setOutput(writer);
-                serializer
-                    .setFeature(
-                            "http://xmlpull.org/v1/doc/features.html#indent-output",
-                            true);
-                // indentation as 3 spaces
-
-                serializer.startDocument("utf-8", true);
-                // Start REQUEST
-                serializer.startTag(null, "REQUEST");
-                // Start CONTENT
-                serializer.startTag(null, "QUERY");
-                serializer.text("INVENTORY");
-                serializer.endTag(null, "QUERY");
-
-                serializer.startTag(null, "DEVICEID");
-                serializer.text(mFusionApp.getDeviceID());
-                serializer.endTag(null, "DEVICEID");
-
-                serializer.startTag(null, "CONTENT");
-                // Start ACCESSLOG
-                serializer.startTag(null, "ACCESSLOG");
-
-                serializer.startTag(null, "LOGDATE");
-
-                serializer.text(DateFormat.format("yyyy-mm-dd hh:MM:ss", mStart)
-                        .toString());
-                serializer.endTag(null, "LOGDATE");
-
-                serializer.startTag(null, "USERID");
-                serializer.text("N/A");
-                serializer.endTag(null, "USERID");
-
-                serializer.endTag(null, "ACCESSLOG");
-                // End ACCESSLOG
-
-                //Manage accountinfos :: TAG
-                if (!mFusionApp.getTag().equals("")) {
-                    serializer.startTag(null, "ACCOUNTINFO");
-                    serializer.startTag(null, "KEYNAME");
-                    serializer.text("TAG");
-                    serializer.endTag(null, "KEYNAME");
-                    serializer.startTag(null, "KEYVALUE");
-                    serializer.text(mFusionApp.getTag());
-                    serializer.endTag(null, "KEYVALUE");
-                    serializer.endTag(null, "ACCOUNTINFO");
-                }
-
-                for (Categories cat : mContent) {
-
-                    cat.toXML(serializer);
-                }
-
-                serializer.endTag(null, "CONTENT");
-                serializer.endTag(null, "REQUEST");
-                serializer.endDocument();
-                return (writer.toString());
-            } catch (Exception e) {
-                // TODO: handle exception
-                throw new RuntimeException(e);
-            }
-
-        }
-        return null;
-    }
-
-
-    @SuppressWarnings("unchecked")
-        public synchronized void run() {
-
-            running = true;
-            mStart = new Date();
-
-            mContent = new ArrayList<Categories>();
-
-            String [] categories = {
-                //                "PhoneStatus",
-                "Hardware",
-                "Bios",
-                "Memory",
-                "Inputs",
-                "Sensors",
-                "Drives",
-                "Cpus",
-                "Simcards",
-                "Videos",
-                "Cameras",
-                "Networks",
-                //                "LocationProviders",
-                "Envs",
-                "Jvm",
-                "Softwares"
-                    //                "Usbs",
-                    //              "Battery",
-                    //              "BluetoothAdapterCategory", // <- there is already a BluetoothAdapter class in android SDK
-            };
-
-            Class<Categories> cat_class;
-
-            for(String c : categories) {
-                cat_class = null;
-                Accueil.log(this, String.format("INVENTORY of %s", c),Log.VERBOSE);
-                try {
-                    cat_class = (Class <Categories>) Class.forName(String.format("org.fusioninventory.categories.%s",c));
-                } catch (ClassNotFoundException e) {
-                    // TODO Auto-generated catch block
-                    e.printStackTrace();
-                }
-                if(cat_class!=null) {
-                    try {
-                        Constructor<Categories> co = cat_class.getConstructor(Context.class);
-                        mContent.add(co.newInstance(mFusionApp));
-                    } catch (SecurityException e) {
-                        // TODO Auto-generated catch block
-                        e.printStackTrace();
-                    } catch (NoSuchMethodException e) {
-                        // TODO Auto-generated catch block
-                        e.printStackTrace();
-                    } catch (IllegalArgumentException e) {
-                        // TODO Auto-generated catch block
-                        e.printStackTrace();
-                    } catch (InstantiationException e) {
-                        // TODO Auto-generated catch block
-                        e.printStackTrace();
-                    } catch (IllegalAccessException e) {
-                        // TODO Auto-generated catch block
-                        e.printStackTrace();
-                    } catch (InvocationTargetException e) {
-                        // TODO Auto-generated catch block
-                        e.printStackTrace();
-                    }
-                }
-            }
-
-
-            Accueil.log(this, "end of inventory", Log.INFO);
-            mEnd = new Date();
-            running = false;
-        }
-}
diff --git a/app/src/main/java/org/fusioninventory/Settings.java b/app/src/main/java/org/fusioninventory/Settings.java
deleted file mode 100644
index 09a6ccd..0000000
--- a/app/src/main/java/org/fusioninventory/Settings.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package org.fusioninventory;
-
-import android.os.Bundle;
-import android.preference.PreferenceActivity;
-
-public class Settings extends PreferenceActivity {
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        // TODO Auto-generated method stub
-        super.onCreate(savedInstanceState);
-        addPreferencesFromResource(R.xml.settings);
-
-    }
-
-}
diff --git a/app/src/main/java/org/fusioninventory/UrlPreference.java b/app/src/main/java/org/fusioninventory/UrlPreference.java
deleted file mode 100644
index 3d106cd..0000000
--- a/app/src/main/java/org/fusioninventory/UrlPreference.java
+++ /dev/null
@@ -1,107 +0,0 @@
-package org.fusioninventory;
-
-import android.content.Context;
-import android.content.res.TypedArray;
-import android.preference.DialogPreference;
-import android.util.AttributeSet;
-import android.util.Log;
-import android.view.View;
-import android.widget.EditText;
-import android.widget.TwoLineListItem;
-
-public class UrlPreference
-        extends DialogPreference {
-
-    private String url;
-    private TwoLineListItem mUrl;
-    private EditText mEditText;
-
-    public UrlPreference(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        setLayoutResource(R.layout.pref_widget_url);
-        FusionInventory.log(this, String.format("isPersistent %s", isPersistent()), Log.WARN);
-        setPersistent(true);
-    }
-
-    @Override
-    protected void onBindView(View view) {
-        // TODO Auto-generated method stub
-        super.onBindView(view);
-
-        mUrl = (TwoLineListItem) view;
-
-        mUrl.getText1().setText(getTitle());
-        mUrl.getText2().setText(getPersistedString(url));
-    }
-
-    @Override
-    protected View onCreateDialogView() {
-        // TODO Auto-generated method stub
-
-        mEditText = new EditText(getContext());
-        return mEditText;
-    }
-
-    @Override
-    protected void onDialogClosed(boolean positiveResult) {
-        super.onDialogClosed(positiveResult);
-        // TODO Auto-generated method stub
-        FusionInventory.log(this, "onDialogClosed " + url, Log.WARN);
-
-        if (!positiveResult) {
-            return;
-        }
-
-        if (callChangeListener(url)) {
-            url = mEditText.getText().toString();
-
-            if (shouldPersist()) {
-                persistString(url);
-            }
-            notifyChanged();
-        }
-    }
-
-    @Override
-    protected void onBindDialogView(View view) {
-        // TODO Auto-generated method stub
-        FusionInventory.log(this, "onBindDialogView " + url, Log.WARN);
-        mEditText.setText(getPersistedString(url));
-        super.onBindDialogView(view);
-    }
-
-    @Override
-    protected Object onGetDefaultValue(TypedArray a, int index) {
-        // This preference type's value type is Integer, so we read the default
-        // value from the attributes as an Integer.
-        return a.getString(index);
-    }
-
-    @Override
-    protected void onSetInitialValue(boolean restoreValue, Object defaultValue) {
-        if (restoreValue) {
-            // Restore state
-            url = getPersistedString((String) defaultValue);
-        } else {
-            // Set state
-            String value = (String) defaultValue;
-            url = value;
-            persistString(value);
-        }
-    }
-    // @Override
-    // protected void onClick() {
-    // super.onClick();
-    // FusionInventory.log(this, "Test Click prefs", Log.WARN);
-    // // TODO Auto-generated method stub
-    // if (!callChangeListener(url)) {
-    // FusionInventory.log(this, "Cancel", Log.WARN);
-    // return;
-    // }
-    //
-    // persistString(url);
-    //
-    // notifyChanged();
-    // }
-
-}
diff --git a/app/src/main/java/org/fusioninventory/categories/Category.java b/app/src/main/java/org/fusioninventory/categories/Category.java
index 8e979d7..45218fa 100644
--- a/app/src/main/java/org/fusioninventory/categories/Category.java
+++ b/app/src/main/java/org/fusioninventory/categories/Category.java
@@ -3,7 +3,6 @@ package org.fusioninventory.categories;
 import java.io.IOException;
 import java.util.LinkedHashMap;

-import org.fusioninventory.FusionInventoryApp;
 import org.xmlpull.v1.XmlSerializer;

 import android.content.Context;
@@ -15,7 +14,6 @@ public class Category extends LinkedHashMap<String, String>{
      *
      */
     private static final long serialVersionUID = 6443019125036309325L;
-    public FusionInventoryApp mApp;
     public Context mCtx;
     public String mType;

diff --git a/app/src/main/java/org/fusioninventory/categories/Cpus.java b/app/src/main/java/org/fusioninventory/categories/Cpus.java
index aeaada6..a43d13f 100644
--- a/app/src/main/java/org/fusioninventory/categories/Cpus.java
+++ b/app/src/main/java/org/fusioninventory/categories/Cpus.java
@@ -54,8 +54,8 @@ public class Cpus extends Categories {

     public String getCpuFrequency() {
         String cpuFrequency = "";
-    	FusionInventory.log(this, "Parse /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq", Log.VERBOSE);
-        File f = new File("/sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq");
+    	FusionInventory.log(this, "Parse /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq", Log.VERBOSE);
+        File f = new File("/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq");
         try {
             BufferedReader br = new BufferedReader(new FileReader(f),8 * 1024);
             String line = br.readLine();
diff --git a/app/src/main/java/org/fusioninventory/categories/Networks.java b/app/src/main/java/org/fusioninventory/categories/Networks.java
index 5a87a86..aaa71ab 100644
--- a/app/src/main/java/org/fusioninventory/categories/Networks.java
+++ b/app/src/main/java/org/fusioninventory/categories/Networks.java
@@ -1,7 +1,6 @@
 package org.fusioninventory.categories;

 import org.fusioninventory.FusionInventory;
-import org.fusioninventory.utils.StringUtils;

 import android.app.Service;
 import android.content.Context;
diff --git a/app/src/main/java/org/fusioninventory/categories/StringUtils.java b/app/src/main/java/org/fusioninventory/categories/StringUtils.java
new file mode 100644
index 0000000..970f39a
--- /dev/null
+++ b/app/src/main/java/org/fusioninventory/categories/StringUtils.java
@@ -0,0 +1,57 @@
+package org.fusioninventory.categories;
+
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.Stack;
+
+public class StringUtils {
+
+    private StringUtils() {
+        // Utility class.
+    }
+
+    public static String join(Collection<String> collection, String delimiter, boolean reversed) {
+        if (collection != null) {
+            StringBuffer buffer = new StringBuffer();
+            Iterator<String> iter = collection.iterator();
+            while (iter.hasNext()) {
+                if (!reversed) {
+                    buffer.append(iter.next());
+                    if (iter.hasNext()) {
+                        buffer.append(delimiter);
+
+                    }
+                } else {
+                    buffer.insert(0, iter.next());
+                    if (iter.hasNext()) {
+                        buffer.insert(0, delimiter);
+
+                    }
+                }
+            }
+            return buffer.toString();
+        } else {
+            return null;
+        }
+    }
+
+    public static String join(Collection<String> collection, String delimiter) {
+
+        return StringUtils.join(collection, delimiter, false);
+
+    }
+
+    public static byte[] int_to_byte(int value) {
+        return new byte[] { (byte) (value >>> 24), (byte) (value >>> 16), (byte) (value >>> 8), (byte) value };
+    }
+
+    public static String int_to_ip(int value) {
+        byte[] b = int_to_byte(value);
+        Stack<String> stack = new Stack<String>();
+        for (byte c : b) {
+            stack.push(String.valueOf(0xFF & c));
+        }
+
+        return (StringUtils.join(stack, ".", true));
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/org/fusioninventory/utils/EasySSLSocketFactory.java b/app/src/main/java/org/fusioninventory/utils/EasySSLSocketFactory.java
deleted file mode 100644
index 1b592ed..0000000
--- a/app/src/main/java/org/fusioninventory/utils/EasySSLSocketFactory.java
+++ /dev/null
@@ -1,149 +0,0 @@
-package org.fusioninventory.utils;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.Socket;
-import java.net.UnknownHostException;
-
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLSocket;
-import javax.net.ssl.TrustManager;
-
-import org.apache.http.conn.ConnectTimeoutException;
-import org.apache.http.conn.scheme.LayeredSocketFactory;
-import org.apache.http.conn.scheme.SocketFactory;
-import org.apache.http.params.HttpConnectionParams;
-import org.apache.http.params.HttpParams;
-import org.fusioninventory.FusionInventory;
-
-import android.util.Log;
-
-/**
- * This socket factory will create ssl socket that accepts self signed
- * certificate
- *
- * @author olamy
- * @version $Id: EasySSLSocketFactory.java 765355 2009-04-15 20:59:07Z evenisse
- *          $
- * @since 1.2.3
- */
-public class EasySSLSocketFactory implements SocketFactory,
-        LayeredSocketFactory {
-
-    private SSLContext sslcontext = null;
-
-    private static SSLContext createEasySSLContext() throws IOException {
-        FusionInventory.log(EasySSLSocketFactory.class,
-                "Create Easy SSL Context", Log.ERROR);
-        try {
-            SSLContext context = SSLContext.getInstance("TLS");
-            context.init(null, new TrustManager[] { new EasyX509TrustManager(
-                    null) }, null);
-            return context;
-        } catch (Exception e) {
-            throw new IOException(e.getMessage());
-        }
-    }
-
-    private SSLContext getSSLContext() throws IOException {
-        if (this.sslcontext == null) {
-            this.sslcontext = createEasySSLContext();
-        }
-        return this.sslcontext;
-    }
-
-    /**
-     * @see org.apache.http.conn.scheme.SocketFactory#connectSocket(java.net.Socket,
-     *      java.lang.String, int, java.net.InetAddress, int,
-     *      org.apache.http.params.HttpParams)
-     */
-    @Override
-    public Socket connectSocket(Socket sock, String host, int port,
-            InetAddress localAddress, int localPort, HttpParams params)
-            throws IOException, UnknownHostException, ConnectTimeoutException {
-        int connTimeout = HttpConnectionParams.getConnectionTimeout(params);
-        int soTimeout = HttpConnectionParams.getSoTimeout(params);
-        InetSocketAddress remoteAddress = new InetSocketAddress(host, port);
-        SSLSocket sslsock = (SSLSocket) ((sock != null) ? sock : createSocket());
-
-        if ((localAddress != null) || (localPort > 0)) {
-            // we need to bind explicitly
-            if (localPort < 0) {
-                localPort = 0; // indicates "any"
-            }
-            InetSocketAddress isa = new InetSocketAddress(localAddress,
-                    localPort);
-            sslsock.bind(isa);
-        }
-
-        sslsock.connect(remoteAddress, connTimeout);
-        sslsock.setSoTimeout(soTimeout);
-        return sslsock;
-
-    }
-
-    /**
-     * @see org.apache.http.conn.scheme.SocketFactory#createSocket()
-     */
-    @Override
-    public Socket createSocket() throws IOException {
-        return getSSLContext().getSocketFactory().createSocket();
-    }
-
-    /**
-     * @see org.apache.http.conn.scheme.SocketFactory#isSecure(java.net.Socket)
-     */
-    @Override
-    public boolean isSecure(Socket socket) throws IllegalArgumentException {
-        return true;
-    }
-
-    /**
-     * @see org.apache.http.conn.scheme.LayeredSocketFactory#createSocket(java.net.Socket,
-     *      java.lang.String, int, boolean)
-     */
-    @Override
-    public Socket createSocket(Socket socket, String host, int port,
-            boolean autoClose) throws IOException, UnknownHostException {
-        return getSSLContext().getSocketFactory().createSocket(socket, host,
-                port, autoClose);
-    }
-
-    // -------------------------------------------------------------------
-    // javadoc in org.apache.http.conn.scheme.SocketFactory says :
-    // Both Object.equals() and Object.hashCode() must be overridden
-    // for the correct operation of some connection managers
-    // -------------------------------------------------------------------
-
-    @Override
-    public boolean equals(Object obj) {
-        return ((obj != null) && obj.getClass().equals(
-                EasySSLSocketFactory.class));
-    }
-
-    @Override
-    public int hashCode() {
-        return EasySSLSocketFactory.class.hashCode();
-    }
-
-}
diff --git a/app/src/main/java/org/fusioninventory/utils/EasyX509TrustManager.java b/app/src/main/java/org/fusioninventory/utils/EasyX509TrustManager.java
deleted file mode 100644
index 5f86cf6..0000000
--- a/app/src/main/java/org/fusioninventory/utils/EasyX509TrustManager.java
+++ /dev/null
@@ -1,99 +0,0 @@
-package org.fusioninventory.utils;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-import java.security.KeyStore;
-import java.security.KeyStoreException;
-import java.security.NoSuchAlgorithmException;
-import java.security.cert.CertificateException;
-import java.security.cert.X509Certificate;
-
-import javax.net.ssl.TrustManager;
-import javax.net.ssl.TrustManagerFactory;
-import javax.net.ssl.X509TrustManager;
-
-import org.fusioninventory.FusionInventory;
-
-import android.util.Log;
-
-/**
- * @author olamy
- * @version $Id: EasyX509TrustManager.java 765355 2009-04-15 20:59:07Z evenisse
- *          $
- * @since 1.2.3
- */
-public class EasyX509TrustManager implements X509TrustManager {
-
-    private X509TrustManager standardTrustManager = null;
-
-    /**
-     * Constructor for EasyX509TrustManager.
-     */
-    public EasyX509TrustManager(KeyStore keystore)
-            throws NoSuchAlgorithmException, KeyStoreException {
-        super();
-        TrustManagerFactory factory = TrustManagerFactory
-                .getInstance(TrustManagerFactory.getDefaultAlgorithm());
-        factory.init(keystore);
-        TrustManager[] trustmanagers = factory.getTrustManagers();
-        if (trustmanagers.length == 0) {
-            throw new NoSuchAlgorithmException("no trust manager found");
-        }
-        this.standardTrustManager = (X509TrustManager) trustmanagers[0];
-    }
-
-    /**
-     * @see javax.net.ssl.X509TrustManager#checkClientTrusted(X509Certificate[],
-     *      String authType)
-     */
-    @Override
-    public void checkClientTrusted(X509Certificate[] certificates,
-            String authType) throws CertificateException {
-        standardTrustManager.checkClientTrusted(certificates, authType);
-    }
-
-    /**
-     * @see javax.net.ssl.X509TrustManager#checkServerTrusted(X509Certificate[],
-     *      String authType)
-     */
-    @Override
-    public void checkServerTrusted(X509Certificate[] certificates,
-            String authType) throws CertificateException {
-        if (certificates != null) {
-            FusionInventory.log(this, "certs(" + certificates.length
-                    + ") authtype(" + authType + ")", Log.WARN);
-            if (certificates.length == 1) {
-                //TODO check preferences
-                //certificates[0].checkValidity();
-            } else {
-                standardTrustManager.checkServerTrusted(certificates, authType);
-            }
-        }
-    }
-
-    /**
-     * @see javax.net.ssl.X509TrustManager#getAcceptedIssuers()
-     */
-    @Override
-    public X509Certificate[] getAcceptedIssuers() {
-        return this.standardTrustManager.getAcceptedIssuers();
-    }
-
-}
diff --git a/app/src/main/java/org/fusioninventory/utils/StringUtils.java b/app/src/main/java/org/fusioninventory/utils/StringUtils.java
deleted file mode 100644
index 5c4f5a9..0000000
--- a/app/src/main/java/org/fusioninventory/utils/StringUtils.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package org.fusioninventory.utils;
-
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.Stack;
-
-public class StringUtils {
-
-    private StringUtils() {
-        // Utility class.
-    }
-
-    public static String join(Collection<String> collection, String delimiter, boolean reversed) {
-        if (collection != null) {
-            StringBuffer buffer = new StringBuffer();
-            Iterator<String> iter = collection.iterator();
-            while (iter.hasNext()) {
-                if (!reversed) {
-                    buffer.append(iter.next());
-                    if (iter.hasNext()) {
-                        buffer.append(delimiter);
-
-                    }
-                } else {
-                    buffer.insert(0, iter.next());
-                    if (iter.hasNext()) {
-                        buffer.insert(0, delimiter);
-
-                    }
-                }
-            }
-            return buffer.toString();
-        } else {
-            return null;
-        }
-    }
-
-    public static String join(Collection<String> collection, String delimiter) {
-
-        return StringUtils.join(collection, delimiter, false);
-
-    }
-
-    public static byte[] int_to_byte(int value) {
-        return new byte[] { (byte) (value >>> 24), (byte) (value >>> 16), (byte) (value >>> 8), (byte) value };
-    }
-
-    public static String int_to_ip(int value) {
-        byte[] b = int_to_byte(value);
-        Stack<String> stack = new Stack<String>();
-        for (byte c : b) {
-            stack.push(String.valueOf(0xFF & c));
-        }
-
-        return (StringUtils.join(stack, ".", true));
-    }
-}
--
2.7.4
